#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è R¬≤ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ johnson_relative_weights

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ:
1. R¬≤ –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0, 1])
2. –°—É–º–º–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–µ—Å–æ–≤ = 100%
3. –°—É–º–º–∞ –≤–µ—Å–æ–≤ = R¬≤
"""

import numpy as np
import sys
from johnson_weights import johnson_relative_weights


def test_rsquared_calculation():
    """–¢–µ—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è R¬≤"""
    
    print("="*60)
    print("–¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø R¬≤ –í JOHNSON'S RELATIVE WEIGHTS")
    print("="*60)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä —Å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–µ–π)
    np.random.seed(42)
    n = 100
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä—ã —Å —Ä–∞–∑–Ω–æ–π —Å—Ç–µ–ø–µ–Ω—å—é –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
    X1 = np.random.randn(n)
    X2 = 0.5 * X1 + np.random.randn(n) * 0.7
    X3 = np.random.randn(n)
    
    X = np.column_stack([X1, X2, X3])
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≤–∏—Å–∏–º—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    y = 0.5 * X1 + 0.3 * X2 + 0.2 * X3 + np.random.randn(n) * 0.5
    
    print("\n–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π: {n}")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä–æ–≤: {X.shape[1]}")
    
    # –í—ã—á–∏—Å–ª—è–µ–º –≤–µ—Å–∞
    results = johnson_relative_weights(X, y)
    
    print("\n" + "="*60)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print("="*60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: R¬≤ –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    r_squared = results['R-squared']
    print(f"\n1. R¬≤ = {r_squared:.6f}")
    
    if 0 <= r_squared <= 1:
        print("   ‚úÖ R¬≤ –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0, 1]")
    else:
        print(f"   ‚ùå –û–®–ò–ë–ö–ê: R¬≤ = {r_squared} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ [0, 1]")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –°—É–º–º–∞ –≤–µ—Å–æ–≤ = R¬≤
    weights = results['rweights']
    sum_weights = np.sum(weights)
    print(f"\n2. –°—É–º–º–∞ –≤–µ—Å–æ–≤ = {sum_weights:.6f}")
    print(f"   –†–∞–∑–Ω–∏—Ü–∞ —Å R¬≤: {abs(sum_weights - r_squared):.10f}")
    
    if abs(sum_weights - r_squared) < 1e-6:
        print("   ‚úÖ –°—É–º–º–∞ –≤–µ—Å–æ–≤ = R¬≤ (—Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ 1e-6)")
    else:
        print(f"   ‚ùå –û–®–ò–ë–ö–ê: –°—É–º–º–∞ –≤–µ—Å–æ–≤ ‚â† R¬≤")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –°—É–º–º–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ = 100%
    percentages = results['percentages']
    sum_percentages = np.sum(percentages)
    print(f"\n3. –°—É–º–º–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ = {sum_percentages:.4f}%")
    
    if abs(sum_percentages - 100) < 1e-4:
        print("   ‚úÖ –°—É–º–º–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ = 100%")
    else:
        print(f"   ‚ùå –û–®–ò–ë–ö–ê: –°—É–º–º–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ ‚â† 100%")
        return False
    
    # –í—ã–≤–æ–¥ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\n" + "="*60)
    print("–î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print("="*60)
    print(f"\nR¬≤ = {r_squared:.6f}\n")
    
    print("–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –≤–µ—Å–∞ –ø–æ –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä–∞–º:")
    for i, (weight, pct) in enumerate(zip(weights, percentages), 1):
        print(f"  –ü—Ä–µ–¥–∏–∫—Ç–æ—Ä {i}: –≤–µ—Å = {weight:.6f}, –ø—Ä–æ—Ü–µ–Ω—Ç = {pct:.2f}%")
    
    print("\n" + "="*60)
    print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    print("="*60)
    
    return True


def test_mathematical_properties():
    """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã"""
    
    print("\n" + "="*60)
    print("–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –¢–ï–°–¢–´")
    print("="*60)
    
    # –¢–µ—Å—Ç 1: –ò–¥–µ–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è (–æ–¥–∏–Ω –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä)
    print("\n–¢–µ—Å—Ç 1: –û–¥–∏–Ω –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä")
    np.random.seed(123)
    n = 50
    X = np.random.randn(n, 1)
    y = 2 * X[:, 0] + np.random.randn(n) * 0.1
    
    results = johnson_relative_weights(X, y)
    print(f"  R¬≤ = {results['R-squared']:.6f}")
    print(f"  –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä–∞ = {results['percentages'][0]:.2f}%")
    
    if abs(results['percentages'][0] - 100) < 1e-4:
        print("  ‚úÖ –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä –æ–±—ä—è—Å–Ω—è–µ—Ç 100% –¥–∏—Å–ø–µ—Ä—Å–∏–∏")
    
    # –¢–µ—Å—Ç 2: –ù–µ–∫–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä—ã
    print("\n–¢–µ—Å—Ç 2: –ù–µ–∫–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä—ã")
    np.random.seed(456)
    n = 100
    X1 = np.random.randn(n)
    X2 = np.random.randn(n)
    X3 = np.random.randn(n)
    
    X = np.column_stack([X1, X2, X3])
    y = 0.6 * X1 + 0.3 * X2 + 0.1 * X3 + np.random.randn(n) * 0.5
    
    results = johnson_relative_weights(X, y)
    print(f"  R¬≤ = {results['R-squared']:.6f}")
    print(f"  –í–µ—Å–∞: {results['rweights']}")
    print(f"  –ü—Ä–æ—Ü–µ–Ω—Ç—ã: {results['percentages']}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤–µ—Å–∞ –ø—Ä–∏–º–µ—Ä–Ω–æ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω—ã –∏—Å—Ç–∏–Ω–Ω—ã–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º
    true_ratios = np.array([0.6, 0.3, 0.1])
    true_ratios = true_ratios / true_ratios.sum()
    estimated_ratios = results['percentages'] / 100
    
    print(f"  –ò—Å—Ç–∏–Ω–Ω—ã–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏: {true_ratios * 100}")
    print(f"  –û—Ü–µ–Ω—ë–Ω–Ω—ã–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏: {estimated_ratios * 100}")
    
    # –¢–µ—Å—Ç 3: –í—ã—Å–æ–∫–∞—è –º—É–ª—å—Ç–∏–∫–æ–ª–ª–∏–Ω–µ–∞—Ä–Ω–æ—Å—Ç—å
    print("\n–¢–µ—Å—Ç 3: –í—ã—Å–æ–∫–∞—è –º—É–ª—å—Ç–∏–∫–æ–ª–ª–∏–Ω–µ–∞—Ä–Ω–æ—Å—Ç—å")
    np.random.seed(789)
    n = 100
    X1 = np.random.randn(n)
    X2 = X1 + np.random.randn(n) * 0.1  # –ü–æ—á—Ç–∏ —Ä–∞–≤–µ–Ω X1
    X3 = np.random.randn(n)
    
    X = np.column_stack([X1, X2, X3])
    y = 0.5 * X1 + 0.5 * X2 + 0.2 * X3 + np.random.randn(n) * 0.5
    
    results = johnson_relative_weights(X, y)
    print(f"  R¬≤ = {results['R-squared']:.6f}")
    print(f"  –í–µ—Å–∞: {results['rweights']}")
    print(f"  –ü—Ä–æ—Ü–µ–Ω—Ç—ã: {results['percentages']}")
    
    # –ü—Ä–∏ –≤—ã—Å–æ–∫–æ–π –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ X1 –∏ X2, –∏—Ö –≤–µ—Å–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–≤–Ω—ã
    weight_ratio = results['rweights'][0] / results['rweights'][1]
    print(f"  –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –≤–µ—Å–æ–≤ X1/X2 = {weight_ratio:.3f}")
    
    print("\n" + "="*60)
    print("‚úÖ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´")
    print("="*60)


if __name__ == "__main__":
    print("\n")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
    success = test_rsquared_calculation()
    
    if not success:
        print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        sys.exit(1)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
    test_mathematical_properties()
    
    print("\n" + "="*60)
    print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    print("="*60)
    print("\n–§—É–Ω–∫—Ü–∏—è johnson_relative_weights —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    print("R¬≤ –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ SPSS –∫–æ–¥–æ–º.")
    print("\n")

