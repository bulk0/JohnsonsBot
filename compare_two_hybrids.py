"""
–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –î–í–£–• —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞:
1. johnson_weights.py - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –±–æ—Ç–µ
2. imputations_v2.py - –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è

–û–±–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç:
- –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∏–º–ø—É—Ç–∞—Ü–∏—é
- –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
- –£—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

–†–∞–∑–Ω–∏—Ü–∞: –≤ –¥–µ—Ç–∞–ª—è—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
"""

import os
import sys
import pandas as pd
import numpy as np

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ imputations_v2
sys.path.insert(0, '/Users/jbaukova/Documents/Projects/JohnsonsBot')
from imputations_v2 import calculate_johnson_weights as calculate_v2

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ johnson_weights
from johnson_weights import calculate_johnson_weights as calculate_bot

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
input_file = 'test_data/error_cases/–ë–∞–∑–∞ Johnson_–≤–µ—Ä—Ö–Ω–∏–π.sav'
dependent_vars = ['q60']
independent_vars = ['q1', 'q2', 'q3', 'q4', 'q5']
output_dir = 'temp/comparison_output'

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
os.makedirs(output_dir, exist_ok=True)

print("="*80)
print("–°–†–ê–í–ù–ï–ù–ò–ï –î–í–£–• –†–ï–ê–õ–ò–ó–ê–¶–ò–ô –ì–ò–ë–†–ò–î–ù–û–ì–û –ü–û–î–•–û–î–ê")
print("="*80)
print(f"–§–∞–π–ª: {input_file}")
print(f"–ó–∞–≤–∏—Å–∏–º–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {dependent_vars}")
print(f"–ù–µ–∑–∞–≤–∏—Å–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {independent_vars}")
print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–º–ø—É—Ç–∞—Ü–∏–π: 5")
print("="*80)

# –ü–û–î–•–û–î 1: imputations_v2.py
print("\n" + "üîµ"*40)
print("–ü–û–î–•–û–î 1: imputations_v2.py")
print("üîµ"*40)
print("\n–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:")
print("- –†–∞—Å—á–µ—Ç –ø–æ –æ–±—â–µ–π –≤—ã–±–æ—Ä–∫–µ (—Ç–æ—Ç–∞–ª)")
print("- –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∏–º–ø—É—Ç–∞—Ü–∏—è (5 –∏—Ç–µ—Ä–∞—Ü–∏–π)")
print("- –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø—Ä–æ–ø—É—Å–∫–æ–≤ —Å–æ–∑–¥–∞—é—Ç—Å—è –∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è")
print("- –ö–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏—Å–∫–ª—é—á–∞—é—Ç—Å—è")
print("- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å—Ä–µ–¥–Ω—è—é—Ç—Å—è –ø–æ –≤—Å–µ–º –∏–º–ø—É—Ç–∞—Ü–∏—è–º")

try:
    output_v2 = calculate_v2(
        input_file=input_file,
        dependent_vars=dependent_vars,
        independent_vars=independent_vars,
        slice_var=None,
        output_dir=output_dir,
        by_brand=False,
        n_imputations=5
    )
    
    if output_v2 and os.path.exists(output_v2):
        # –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        df_v2 = pd.read_excel(output_v2)
        print(f"\n‚úÖ –†–∞—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {output_v2}")
        
        # –¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä—É–µ–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ (–≤ —Ñ–∞–π–ª–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω—ã)
        df_v2_t = df_v2.set_index(df_v2.columns[0]).T
        
        print("\n–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
        print(f"  –ö–æ–ª–æ–Ω–æ–∫ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ: {df_v2.shape[1]}")
        print(f"  –°—Ç—Ä–æ–∫ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ: {df_v2.shape[0]}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Å–∞
        weight_cols_v2 = [col for col in df_v2_t.columns if col.startswith('Weight_')]
        pct_cols_v2 = [col for col in df_v2_t.columns if col.startswith('Percentage_')]
        
        print(f"\n  –ü–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å –≤–µ—Å–∞–º–∏: {len(weight_cols_v2)}")
        print(f"  –°–ø–∏—Å–æ–∫: {weight_cols_v2}")
        
        # –ü–æ–ª—É—á–∞–µ–º R-squared –∏ —Ä–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏
        r2_v2 = df_v2_t['R-squared'].iloc[0] if 'R-squared' in df_v2_t.columns else None
        n_v2 = df_v2_t['Sample Size'].iloc[0] if 'Sample Size' in df_v2_t.columns else None
        
        print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è q60:")
        print(f"  R¬≤ = {r2_v2:.6f}" if r2_v2 else "  R¬≤ = –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print(f"  –†–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏ = {n_v2}" if n_v2 else "  –†–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏ = –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        print(f"\n  {'–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è':<20} {'Weight':<15} {'Percentage':<15}")
        print("  " + "-"*50)
        for i, weight_col in enumerate(weight_cols_v2):
            var_name = weight_col.replace('Weight_', '')
            pct_col = f'Percentage_{var_name}'
            weight = df_v2_t[weight_col].iloc[0]
            pct = df_v2_t[pct_col].iloc[0] if pct_col in df_v2_t.columns else 0
            print(f"  {var_name:<20} {weight:<15.6f} {pct:<15.2f}%")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å—á–µ—Ç")
        df_v2 = None
        r2_v2 = None
        weight_cols_v2 = []
        
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏: {str(e)}")
    import traceback
    traceback.print_exc()
    df_v2 = None
    r2_v2 = None
    weight_cols_v2 = []

# –ü–û–î–•–û–î 2: johnson_weights.py (–±–æ—Ç)
print("\n\n" + "üü¢"*40)
print("–ü–û–î–•–û–î 2: johnson_weights.py (–±–æ—Ç)")
print("üü¢"*40)
print("\n–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:")
print("- –†–∞—Å—á–µ—Ç –ø–æ –æ–±—â–µ–π –≤—ã–±–æ—Ä–∫–µ (—Ç–æ—Ç–∞–ª)")
print("- –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∏–º–ø—É—Ç–∞—Ü–∏—è (5 –∏—Ç–µ—Ä–∞—Ü–∏–π)")  
print("- –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø—Ä–æ–ø—É—Å–∫–æ–≤ —Å–æ–∑–¥–∞—é—Ç—Å—è –∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è")
print("- –ö–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏—Å–∫–ª—é—á–∞—é—Ç—Å—è")
print("- '–ú—è–≥–∫–∞—è –ª–æ–≥–∏–∫–∞': –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–∫–ª—é—á–∞—é—Ç—Å—è —Å –≤–µ—Å–æ–º 0 –µ—Å–ª–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—ã")
print("- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∫–ª—é—á–∞—é—Ç MICE, Hybrid –∏ Simple –º–µ—Ç–æ–¥—ã")

try:
    output_bot = calculate_bot(
        input_file=input_file,
        dependent_vars=dependent_vars,
        independent_vars=independent_vars,
        subgroups=None,
        min_sample_size=100,
        output_dir=output_dir
    )
    
    if output_bot and os.path.exists(output_bot):
        # –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        df_bot_full = pd.read_excel(output_bot)
        print(f"\n‚úÖ –†–∞—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {output_bot}")
        
        # –¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä—É–µ–º
        df_bot_t = df_bot_full.set_index(df_bot_full.columns[0]).T
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ Hybrid —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if 'Imputation Method' in df_bot_t.columns:
            hybrid_rows = df_bot_t[df_bot_t['Imputation Method'] == 'Hybrid']
            if len(hybrid_rows) > 0:
                df_bot = hybrid_rows.iloc[0:1]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É Hybrid
            else:
                print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ —Å –º–µ—Ç–æ–¥–æ–º Hybrid")
                df_bot = df_bot_t.iloc[0:1]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
        else:
            df_bot = df_bot_t.iloc[0:1]
        
        print("\n–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
        print(f"  –ö–æ–ª–æ–Ω–æ–∫ –≤ —Ñ–∞–π–ª–µ: {df_bot_full.shape[1]}")
        print(f"  –°—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ: {df_bot_full.shape[0]}")
        print(f"  –ú–µ—Ç–æ–¥–æ–≤ –∏–º–ø—É—Ç–∞—Ü–∏–∏: {df_bot_t['Imputation Method'].unique() if 'Imputation Method' in df_bot_t.columns else '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Å–∞ –¥–ª—è Hybrid
        weight_cols_bot = [col for col in df_bot.columns if col.startswith('Weight_')]
        pct_cols_bot = [col for col in df_bot.columns if col.startswith('Percentage_')]
        
        print(f"\n  –ü–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å –≤–µ—Å–∞–º–∏ (Hybrid): {len(weight_cols_bot)}")
        print(f"  –°–ø–∏—Å–æ–∫: {weight_cols_bot}")
        
        # –ü–æ–ª—É—á–∞–µ–º R-squared –∏ —Ä–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏
        r2_bot = df_bot['R-squared'].iloc[0] if 'R-squared' in df_bot.columns else None
        n_bot = df_bot['Sample Size'].iloc[0] if 'Sample Size' in df_bot.columns else None
        
        print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã Hybrid –¥–ª—è q60:")
        print(f"  R¬≤ = {r2_bot:.6f}" if r2_bot else "  R¬≤ = –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print(f"  –†–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏ = {n_bot}" if n_bot else "  –†–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏ = –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        print(f"\n  {'–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è':<20} {'Weight':<15} {'Percentage':<15}")
        print("  " + "-"*50)
        for weight_col in weight_cols_bot:
            var_name = weight_col.replace('Weight_', '')
            pct_col = f'Percentage_{var_name}'
            weight = df_bot[weight_col].iloc[0]
            pct = df_bot[pct_col].iloc[0] if pct_col in df_bot.columns else 0
            print(f"  {var_name:<20} {weight:<15.6f} {pct:<15.2f}%")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å—á–µ—Ç")
        df_bot = None
        r2_bot = None
        weight_cols_bot = []
        
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏: {str(e)}")
    import traceback
    traceback.print_exc()
    df_bot = None
    r2_bot = None
    weight_cols_bot = []

# –°–†–ê–í–ù–ï–ù–ò–ï
if df_v2 is not None and df_bot is not None:
    print("\n\n" + "="*80)
    print("–î–ï–¢–ê–õ–¨–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï")
    print("="*80)
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ R¬≤
    print(f"\n1. R-SQUARED:")
    print(f"  imputations_v2.py: {r2_v2:.6f}")
    print(f"  johnson_weights.py: {r2_bot:.6f}")
    print(f"  –†–∞–∑–Ω–∏—Ü–∞: {abs(r2_v2 - r2_bot):.6f}")
    if abs(r2_v2 - r2_bot) < 0.0001:
        print("  ‚úÖ R¬≤ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã")
    else:
        print(f"  ‚ö†Ô∏è R¬≤ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –Ω–∞ {abs(r2_v2 - r2_bot):.6f}")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    print(f"\n2. –ö–û–õ–ò–ß–ï–°–¢–í–û –ü–ï–†–ï–ú–ï–ù–ù–´–• –° –í–ï–°–ê–ú–ò:")
    print(f"  imputations_v2.py: {len(weight_cols_v2)}")
    print(f"  johnson_weights.py: {len(weight_cols_bot)}")
    
    if len(weight_cols_v2) < len(weight_cols_bot):
        print(f"  ‚ö†Ô∏è imputations_v2.py –∏–º–µ–µ—Ç –ú–ï–ù–¨–®–ï –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö")
        print(f"     –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –±—ã–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∫–∞–∫ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—ã–µ")
    elif len(weight_cols_v2) > len(weight_cols_bot):
        print(f"  ‚ö†Ô∏è johnson_weights.py –∏–º–µ–µ—Ç –ú–ï–ù–¨–®–ï –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö")
    else:
        print(f"  ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–¥–∏–Ω–∞–∫–æ–≤–æ")
    
    # –ù–∞–π–¥–µ–º –æ–±—â–∏–µ –∏ —Ä–∞–∑–ª–∏—á–∞—é—â–∏–µ—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    vars_v2 = set([col.replace('Weight_', '') for col in weight_cols_v2])
    vars_bot = set([col.replace('Weight_', '') for col in weight_cols_bot])
    
    common_vars = vars_v2 & vars_bot
    only_v2 = vars_v2 - vars_bot
    only_bot = vars_bot - vars_v2
    
    print(f"\n3. –°–û–°–¢–ê–í –ü–ï–†–ï–ú–ï–ù–ù–´–•:")
    print(f"  –û–±—â–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {len(common_vars)}")
    print(f"  –¢–æ–ª—å–∫–æ –≤ v2: {len(only_v2)} {list(only_v2) if only_v2 else ''}")
    print(f"  –¢–æ–ª—å–∫–æ –≤ bot: {len(only_bot)} {list(only_bot) if only_bot else ''}")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ—Å–æ–≤ –¥–ª—è –æ–±—â–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    if common_vars:
        print(f"\n4. –°–†–ê–í–ù–ï–ù–ò–ï –í–ï–°–û–í –û–ë–©–ò–• –ü–ï–†–ï–ú–ï–ù–ù–´–•:")
        print(f"  {'–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è':<20} {'v2 Weight':<15} {'bot Weight':<15} {'–†–∞–∑–Ω–∏—Ü–∞':<15} {'v2 %':<12} {'bot %':<12}")
        print("  " + "-"*90)
        
        max_diff = 0
        max_diff_var = None
        
        for var in sorted(common_vars):
            w_v2 = df_v2_t[f'Weight_{var}'].iloc[0]
            w_bot = df_bot[f'Weight_{var}'].iloc[0]
            p_v2 = df_v2_t[f'Percentage_{var}'].iloc[0]
            p_bot = df_bot[f'Percentage_{var}'].iloc[0]
            
            diff = abs(w_v2 - w_bot)
            if diff > max_diff:
                max_diff = diff
                max_diff_var = var
            
            status = "‚úÖ" if diff < 0.0001 else "‚ö†Ô∏è" if diff < 0.001 else "‚ùå"
            print(f"  {var:<20} {w_v2:<15.6f} {w_bot:<15.6f} {diff:<15.6f} {p_v2:<12.2f}% {p_bot:<12.2f}% {status}")
        
        print(f"\n  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞: {max_diff:.6f} (–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {max_diff_var})")
        
        if max_diff < 0.0001:
            print("  ‚úÖ –í—Å–µ –≤–µ—Å–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã")
        elif max_diff < 0.001:
            print("  ‚ö†Ô∏è –ù–µ–±–æ–ª—å—à–∏–µ —Ä–∞–∑–ª–∏—á–∏—è –≤ –≤–µ—Å–∞—Ö (–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑-–∑–∞ random seed)")
        else:
            print("  ‚ùå –°—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∏—è –≤ –≤–µ—Å–∞—Ö")
    
    # –ê–Ω–∞–ª–∏–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    indicators_v2 = [v for v in vars_v2 if v.endswith('_missing')]
    indicators_bot = [v for v in vars_bot if v.endswith('_missing')]
    
    print(f"\n5. –ò–ù–î–ò–ö–ê–¢–û–†–´ –ü–†–û–ü–£–©–ï–ù–ù–´–• –ó–ù–ê–ß–ï–ù–ò–ô:")
    print(f"  –í v2: {len(indicators_v2)} –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
    print(f"  –í bot: {len(indicators_bot)} –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
    
    if indicators_v2:
        print(f"\n  –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤ v2:")
        for ind in sorted(indicators_v2):
            w = df_v2_t[f'Weight_{ind}'].iloc[0]
            p = df_v2_t[f'Percentage_{ind}'].iloc[0]
            print(f"    {ind:<20} weight={w:.6f}, %={p:.2f}%")
    
    if indicators_bot:
        print(f"\n  –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤ bot:")
        for ind in sorted(indicators_bot):
            w = df_bot[f'Weight_{ind}'].iloc[0]
            p = df_bot[f'Percentage_{ind}'].iloc[0]
            print(f"    {ind:<20} weight={w:.6f}, %={p:.2f}%")
    
    # –ò—Ç–æ–≥–æ–≤–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ
    print("\n" + "="*80)
    print("–ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï")
    print("="*80)
    
    if abs(r2_v2 - r2_bot) < 0.0001 and len(weight_cols_v2) == len(weight_cols_bot) and max_diff < 0.0001:
        print("""
‚úÖ –û–ë–ê –ü–û–î–•–û–î–ê –î–ê–Æ–¢ –ò–î–ï–ù–¢–ò–ß–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´
   - R¬≤ —Å–æ–≤–ø–∞–¥–∞—é—Ç
   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–¥–∏–Ω–∞–∫–æ–≤–æ
   - –í–µ—Å–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã
   
–í–´–í–û–î: –†–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω—ã, —Ä–∞–∑–ª–∏—á–∏–π –≤ –ª–æ–≥–∏–∫–µ –Ω–µ—Ç.
""")
    else:
        print(f"""
‚ö†Ô∏è –ü–û–î–•–û–î–´ –ò–ú–ï–Æ–¢ –†–ê–ó–õ–ò–ß–ò–Ø:

1. R¬≤: {'–æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ' if abs(r2_v2 - r2_bot) < 0.0001 else f'—Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è –Ω–∞ {abs(r2_v2 - r2_bot):.6f}'}

2. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: 
   - v2: {len(weight_cols_v2)}
   - bot: {len(weight_cols_bot)}
   {f"‚Üí –†–∞–∑–Ω–∏—Ü–∞: {abs(len(weight_cols_v2) - len(weight_cols_bot))} –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö" if len(weight_cols_v2) != len(weight_cols_bot) else "‚Üí –û–¥–∏–Ω–∞–∫–æ–≤–æ"}

3. –í–µ—Å–∞: {'–∏–¥–µ–Ω—Ç–∏—á–Ω—ã' if max_diff < 0.0001 else f'–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ {max_diff:.6f}'}

4. –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:
   - v2: {len(indicators_v2)} –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
   - bot: {len(indicators_bot)} –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤

–í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´ –†–ê–ó–õ–ò–ß–ò–ô:
- –†–∞–∑–Ω—ã–µ random seed –ø—Ä–∏ –∏–º–ø—É—Ç–∞—Ü–∏–∏
- –†–∞–∑–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
- –†–∞–∑–Ω–∞—è –ª–æ–≥–∏–∫–∞ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
- "–ú—è–≥–∫–∞—è –ª–æ–≥–∏–∫–∞" –≤ bot –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω—É–ª–µ–≤—ã–µ –≤–µ—Å–∞
""")
else:
    print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ - –æ–¥–∏–Ω –∏–ª–∏ –æ–±–∞ —Ä–∞—Å—á–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π")

